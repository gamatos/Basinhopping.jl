var documenterSearchIndex = {"docs":
[{"location":"functions/#Index","page":"List of functions","title":"Index","text":"","category":"section"},{"location":"functions/","page":"List of functions","title":"List of functions","text":"","category":"page"},{"location":"functions/#Reference","page":"List of functions","title":"Reference","text":"","category":"section"},{"location":"functions/","page":"List of functions","title":"List of functions","text":"Modules = [Basinhopping]","category":"page"},{"location":"functions/#Basinhopping.AcceptanceTest","page":"List of functions","title":"Basinhopping.AcceptanceTest","text":"Represents test indicating whether optimization result should be accepted\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.BasinhoppingOutcome","page":"List of functions","title":"Basinhopping.BasinhoppingOutcome","text":"Basinhopping algorithm outcomes\n\nniter_completed: Maximum number of local optimisatiosn reached\nearly_stop: Callback function requested an early stop to the algorithm\nsuccess_condition: Same minimum found more than specified number of times\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.BasinhoppingParams","page":"List of functions","title":"Basinhopping.BasinhoppingParams","text":"struct BasinhoppingParams{T<:StepTaker,U<:AcceptanceTest,C<:Function}\n\nOptional parameters to Basinhopping algorithm\n\nFields\n\nniter::Int64: Total number of local optimisations performed.\nstep_taker::T: Total number of local optimizations performed.\ntest::U: Test determining whether local optimization is accepted.\ncallback::C: Function to be called after each local optimization. Signature: (x, minimum, parameters_after_local_opt, minimum_after_local_opt, test_result) -> bool. If this returns true the algorithm is stopped.\nniter_success::Int64: Stop if the global minimum candidate remains the same for this number of iterations.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.BasinhoppingParams-Tuple{}","page":"List of functions","title":"Basinhopping.BasinhoppingParams","text":"function BasinhoppingParams(;<keyword arguments>)\n\nKeyword arguments\n\nniter: Default: 20.\nstep_taker: Default RandomDisplacement(0.5, Random.GLOBAL_RNG, 50, 0.5, 0.9).\ntest: Default: MetropolisTest(1.0, Random.GLOBAL_RNG).\ncallback::Int64: Default: (...) -> false. \nniter_success::Int64: Default: 2\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.BasinhoppingResult","page":"List of functions","title":"Basinhopping.BasinhoppingResult","text":"Basinhopping algorithm result\n\nFields\n\nminimization_result: local optimization result identified as global minimum\ntotal_iterations::Int64: total number of local optimizations performed\nf_calls::Int64: total number of function evaluations\ng_calls::Int64: total number of gradient calls\nh_calls::Int64: total number of Hessian evaluations\nexit_code::BasinhoppingOutcome: Result of algorithm (see BasinhoppingOutcome documentation)\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.CompositeTest","page":"List of functions","title":"Basinhopping.CompositeTest","text":"Group multiple tests together\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.MetropolisTest","page":"List of functions","title":"Basinhopping.MetropolisTest","text":"Metropolis acceptance test parameters\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.MetropolisTest-2","page":"List of functions","title":"Basinhopping.MetropolisTest","text":"function MetropolisTest(T[, rng])\n\nCreate Metropolis acceptance test with temperature T = 1/beta.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.RandomDisplacement","page":"List of functions","title":"Basinhopping.RandomDisplacement","text":"Random displacement of parameters.\n\nFields\n\nstepsize::Float64: Size of random displacement.\nrng::RNG: Source of pseudorandomness.\ninterval::Int64: total number of function evaluations.\ntarget_accept_rate::Float64: Ratio between local minima being accepted and all local optimizations.\nfactor::Float64: Factor by which to adjust step size when updating.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.StepTaker","page":"List of functions","title":"Basinhopping.StepTaker","text":"Represents perturbation of parameters between local optimizations.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Basinhopping.Test","page":"List of functions","title":"Basinhopping.Test","text":"Result of applying acceptance test\n\naccept: Test passed, local minimum accepted\nreject: Test failed, local minimum rejected\nforce: Forced acceptance of local minimum\n\n\n\n\n\n","category":"type"},{"location":"functions/#Base.minimum-Tuple{BasinhoppingResult}","page":"List of functions","title":"Base.minimum","text":"Returns global minimum found by basinhopping\n\n\n\n\n\n","category":"method"},{"location":"functions/#Base.show-Tuple{BasinhoppingResult}","page":"List of functions","title":"Base.show","text":"Show global minimum found\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.apply_test-Tuple{Basinhopping.AcceptanceTest, Any, Any, Any, Any}","page":"List of functions","title":"Basinhopping.apply_test","text":"function apply_test(test,\n                    minimum_after_local_opt,\n                    x_after_local_opt,\n                    minimum,\n                    x)\n\nApply acceptance test.\n\nArguments\n\noptimizer: an optimization routine; must be a callable accepting                a single argument, the initial parameters for a local optimization\nx0: initial parameters for first local optimization\nparameters: optional parameters; see BasinhoppingParams\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.apply_test-Tuple{Basinhopping.CompositeTest, Any, Any, Any, Any}","page":"List of functions","title":"Basinhopping.apply_test","text":"function apply_test(test::CompositeTest,\n                    minimum_after_local_opt,\n                    x_after_local_opt,\n                    minimum,\n                    x)\n\nEvaluates composite acceptace test; test is accepted either if all tests are accepted or if one test forces the acceptance by returning force.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.apply_test-Tuple{Basinhopping.MetropolisTest, Any, Any, Any, Any}","page":"List of functions","title":"Basinhopping.apply_test","text":"function apply_test(test::MetropolisTest,\n                    minimum_after_local_opt,\n                    x_after_local_opt,\n                    minimum,\n                    x)\n\nEvaluates Metropolis acceptace test.\n\nSee also metropolis_criterion\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.basinhopping","page":"List of functions","title":"Basinhopping.basinhopping","text":"function basinhopping(optimizer, x0[, parameters])\n\nBasinhopping optimization algorithm.\n\nArguments\n\noptimizer: an optimization routine; must be a callable accepting               a single argument, the initial parameters for a local optimization\nx0: initial parameters for first local optimization\nparameters: optional parameters; see BasinhoppingParams\n\n\n\n\n\n","category":"function"},{"location":"functions/#Basinhopping.metropolis_criterion-NTuple{4, Any}","page":"List of functions","title":"Basinhopping.metropolis_criterion","text":"Evaluates Metropolis criterion.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.success_string-Tuple{Basinhopping.BasinhoppingOutcome}","page":"List of functions","title":"Basinhopping.success_string","text":"Reports on exit code of basinhopping\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.take_step!-Tuple{Basinhopping.RandomDisplacement, Any}","page":"List of functions","title":"Basinhopping.take_step!","text":"take_step!(d::RandomDisplacement, x)\n\nRandom perturbation in every coordinate of x.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.take_step!-Tuple{Basinhopping.StepTaker, Any}","page":"List of functions","title":"Basinhopping.take_step!","text":"take_step!(d::StepTaker, x)\n\nPerturbs parameters x as specified by a step taker d\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.update!-Tuple{Basinhopping.RandomDisplacement, Int64, Int64}","page":"List of functions","title":"Basinhopping.update!","text":"update!(d::RandomDisplacement, nstep, naccept)\n\n\n\n\n\n","category":"method"},{"location":"functions/#Basinhopping.update!-Tuple{Basinhopping.StepTaker, Int64, Int64}","page":"List of functions","title":"Basinhopping.update!","text":"update!(d::StepTaker, nstep, naccept)\n\nUpdates step taking routine.\n\nArguments\n\nd::StepTaker: \nnstep::Int: Number of local optimizations performed so far.\nnaccept::Int: Number of local minima accepted so far.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Optim.f_calls-Tuple{BasinhoppingResult}","page":"List of functions","title":"Optim.f_calls","text":"Returns total number of function evaluations\n\n\n\n\n\n","category":"method"},{"location":"functions/#Optim.g_calls-Tuple{BasinhoppingResult}","page":"List of functions","title":"Optim.g_calls","text":"Returns total number of gradient evaluations\n\n\n\n\n\n","category":"method"},{"location":"functions/#Optim.h_calls-Tuple{BasinhoppingResult}","page":"List of functions","title":"Optim.h_calls","text":"Returns total number of Hessian evaluations\n\n\n\n\n\n","category":"method"},{"location":"functions/#Optim.minimizer-Tuple{BasinhoppingResult}","page":"List of functions","title":"Optim.minimizer","text":"Returns parameters at which global minimum was found\n\n\n\n\n\n","category":"method"},{"location":"#Basinhopping.jl","page":"Home","title":"Basinhopping.jl","text":"","category":"section"},{"location":"#Description","page":"Home","title":"Description","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julia implementation of the basinhopping global optimization algorithm. This algorithm attempts to find the global minimum of a given function by successively performing a local optimization followed by a perturbation of the optimal parameters. This allows the algorithm to \"jump\" between local minima until the global one is found. An acceptance test determines whether a \"jump\" is performed or not.","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"#Basic-usage","page":"Home","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Optim\nusing Basinhopping\nusing LinearAlgebra\n\nf(x) = norm(x)\n\n# Define local optimiser to use\nopt = (initial_guess)->optimize(f, initial_guess, LBFGS())\n\n# Optimise\nret = basinhopping(opt, [1.0, 1.0], BasinhoppingParams(niter=200))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Optional arguments are passed using the BasinhoppingParams constructor. The keyword arguments are","category":"page"},{"location":"","page":"Home","title":"Home","text":"niter: Integer specifying how many local optimisations should be performed.\nstep_taker: How to perturb local minimum parameters to find initial condition for next local optimization (see Perturbation of optimal parameters).\ntest: Determines how to decide whether to accept a local minimum or to discard it (see Acceptance criteria).\ncallback: Function that gets called after each local optimization. Has signature (x, min, new_x, new_min, test_result) -> bool. Returning true stops the algorithm.\nniter_success: If more than this number of tests are rejected, return current minimum as the global minimum. Defaults to going through all iterations regardless of number of rejections.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The optimizer supplied must return a structure which has the following functions defined: minimizer, minimum, f_calls, g_calls, h_calls. This follows the interface of interface Optim.jl, which is supported as a provider of local optimizers.","category":"page"},{"location":"#Acceptance-criteria","page":"Home","title":"Acceptance criteria","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After a local minimum is found, it is compared to the previously found minimum using an acceptance test. The test is specified by passing an instance of a subtype of AcceptanceTest to the test keyword argument of BasinhoppingParams. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The default acceptance test is a Metropolis test, and is specified by the MetropolisTest structure. The test is accepted if the new minimum has a lower value than the previous one; otherwise it is accepted with probability","category":"page"},{"location":"","page":"Home","title":"Home","text":"exp(-(new_minimum - old_minimum) / T)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where T (the temperature) is passed as a parameter to the structure.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To implement a custom acceptance criterion, create a subtype of AcceptanceTest and implement the take_step!(d::StepTaker, x) function for that type, where x are the coordinates of the current minimum.","category":"page"},{"location":"#Perturbation-of-optimal-parameters","page":"Home","title":"Perturbation of optimal parameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"After a local minimum is found, the coordinates of that minimum are perturbed and a new local optimization is performed. The method by which that perturbation is made is defined by passing an instance of a subtype of StepTaker to the step_taker keyword argument of BasinhoppingParams. The default perturbation is a uniform random perturbation in every direction in the coordinates, and is specified by the RandomDisplacement structure.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To implement a custom perturbation, create a subtype of StepTaker and implement","category":"page"},{"location":"","page":"Home","title":"Home","text":"A take_step!(d::StepTaker, x) function for that type, where x are the coordinates of the current minimum.\nAn update!(d::StepTaker, nstep::Int, naccept::Int) function, where nstep is the number of local optimisations performed so far and naccept is the number of those which were accepted by the acceptance test. This function gets called between iterations and allows one to update the parameters of the step taker dynamically.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed with Pkg.add","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"Basinhopping\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or through the pkg REPL mode by typing","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add Basinhopping","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Wales, David J. 2003, Energy Landscapes, Cambridge University Press, Cambridge, UK.\nWales, D J, and Doye J P K, Global Optimization by Basin-Hopping and the Lowest Energy Structures of Lennard-Jones Clusters Containing up to 110 Atoms. Journal of Physical Chemistry A, 1997, 101, 5111.\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.basinhopping.html","category":"page"}]
}
